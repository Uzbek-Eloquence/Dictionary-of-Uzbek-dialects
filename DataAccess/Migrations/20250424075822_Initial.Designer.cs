// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(EntityContext))]
    [Migration("20250424075822_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("DataAccess.Schemas.Auth.Session", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_date");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("expire_date");

                    b.Property<byte>("Status")
                        .HasColumnType("INTEGER")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_date");

                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("sessions", "auth");
                });

            modelBuilder.Entity("DataAccess.Schemas.Auth.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_date");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT")
                        .HasColumnName("phone");

                    b.Property<byte>("Status")
                        .HasColumnType("INTEGER")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.ToTable("users", "auth");
                });

            modelBuilder.Entity("Dictionary.Domain.Entity.DerivationalAffixes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_date");

                    b.Property<long>("FirstPartOfSpeachId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("FirstPartOfSpeachId");

                    b.Property<bool>("IsSuffix")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IsSuffix");

                    b.Property<long>("LastPartOfSpeechId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("LastPartOfSpeachId");

                    b.Property<byte>("Status")
                        .HasColumnType("INTEGER")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(16)")
                        .HasColumnName("Title");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex("FirstPartOfSpeachId");

                    b.HasIndex("LastPartOfSpeechId");

                    b.ToTable("derivational_affixes", "public");
                });

            modelBuilder.Entity("Dictionary.Domain.Entity.Dialect", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_date");

                    b.Property<byte>("Status")
                        .HasColumnType("INTEGER")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Title");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.ToTable("dialect", "public");
                });

            modelBuilder.Entity("Dictionary.Domain.Entity.DialectalDerivationalAffix", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_date");

                    b.Property<long>("DerivationalAffixesId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("DerivationalAffixesId");

                    b.Property<long>("DialectsId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("DialectsId");

                    b.Property<bool>("IsSuffix")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IsSuffix");

                    b.Property<byte>("Status")
                        .HasColumnType("INTEGER")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(16)")
                        .HasColumnName("Title");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex("DerivationalAffixesId");

                    b.HasIndex("DialectsId");

                    b.ToTable("dialectal_derivational_affix", "public");
                });

            modelBuilder.Entity("Dictionary.Domain.Entity.DialectalInflectionalAffix", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_date");

                    b.Property<long>("DialectsId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("DialectsId");

                    b.Property<long>("InflectionalAffixesId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("InflectionalAffixesId");

                    b.Property<bool>("IsSuffix")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IsSuffix");

                    b.Property<byte>("Status")
                        .HasColumnType("INTEGER")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(16)")
                        .HasColumnName("Title");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex("DialectsId");

                    b.HasIndex("InflectionalAffixesId");

                    b.ToTable("dialectal_inflectional_affix", "public");
                });

            modelBuilder.Entity("Dictionary.Domain.Entity.DialectalWord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_date");

                    b.Property<long>("DialectsId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("DialectsId");

                    b.Property<long>("LiteraryWordsId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("LiteraryWordsId");

                    b.Property<byte>("Status")
                        .HasColumnType("INTEGER")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(16)")
                        .HasColumnName("Title");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex("DialectsId");

                    b.HasIndex("LiteraryWordsId");

                    b.ToTable("dialectal_word", "public");
                });

            modelBuilder.Entity("Dictionary.Domain.Entity.InflectionalAffix", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_date");

                    b.Property<long>("FirstPartOfSpeachId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("FirstPartOfSpeachId");

                    b.Property<bool>("IsSuffix")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IsSuffix");

                    b.Property<byte>("Status")
                        .HasColumnType("INTEGER")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(16)")
                        .HasColumnName("Title");

                    b.Property<long>("TypesOfInflectionalAffixesId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TypesOfInflectionalAffixesId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex("FirstPartOfSpeachId");

                    b.HasIndex("TypesOfInflectionalAffixesId");

                    b.ToTable("InflectionalAffixes");
                });

            modelBuilder.Entity("Dictionary.Domain.Entity.LiteraryWord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(1024)")
                        .HasColumnName("Description");

                    b.Property<long>("PartOfSpeechId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("PartOfSpeechId");

                    b.Property<byte>("Status")
                        .HasColumnType("INTEGER")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(256)")
                        .HasColumnName("Title");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex("PartOfSpeechId");

                    b.ToTable("LiteraryWords");
                });

            modelBuilder.Entity("Dictionary.Domain.Entity.PartOfSpeech", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_date");

                    b.Property<byte>("Status")
                        .HasColumnType("INTEGER")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Title");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.ToTable("PartOfSpeeches");
                });

            modelBuilder.Entity("Dictionary.Domain.Entity.TypeOfInflectionalAffix", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_date");

                    b.Property<byte>("Status")
                        .HasColumnType("INTEGER")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Title");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.ToTable("TypeOfInflectionalAffixes");
                });

            modelBuilder.Entity("DataAccess.Schemas.Auth.Session", b =>
                {
                    b.HasOne("DataAccess.Schemas.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dictionary.Domain.Entity.DerivationalAffixes", b =>
                {
                    b.HasOne("Dictionary.Domain.Entity.PartOfSpeech", "FirstPartOfSpeach")
                        .WithMany()
                        .HasForeignKey("FirstPartOfSpeachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dictionary.Domain.Entity.PartOfSpeech", "LastPartOfSpeech")
                        .WithMany()
                        .HasForeignKey("LastPartOfSpeechId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FirstPartOfSpeach");

                    b.Navigation("LastPartOfSpeech");
                });

            modelBuilder.Entity("Dictionary.Domain.Entity.DialectalDerivationalAffix", b =>
                {
                    b.HasOne("Dictionary.Domain.Entity.DerivationalAffixes", "DerivationalAffixes")
                        .WithMany()
                        .HasForeignKey("DerivationalAffixesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dictionary.Domain.Entity.Dialect", "Dialects")
                        .WithMany()
                        .HasForeignKey("DialectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DerivationalAffixes");

                    b.Navigation("Dialects");
                });

            modelBuilder.Entity("Dictionary.Domain.Entity.DialectalInflectionalAffix", b =>
                {
                    b.HasOne("Dictionary.Domain.Entity.Dialect", "Dialects")
                        .WithMany()
                        .HasForeignKey("DialectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dictionary.Domain.Entity.InflectionalAffix", "InflectionalAffixes")
                        .WithMany()
                        .HasForeignKey("InflectionalAffixesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dialects");

                    b.Navigation("InflectionalAffixes");
                });

            modelBuilder.Entity("Dictionary.Domain.Entity.DialectalWord", b =>
                {
                    b.HasOne("Dictionary.Domain.Entity.Dialect", "Dialects")
                        .WithMany()
                        .HasForeignKey("DialectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dictionary.Domain.Entity.LiteraryWord", "LiteraryWords")
                        .WithMany()
                        .HasForeignKey("LiteraryWordsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dialects");

                    b.Navigation("LiteraryWords");
                });

            modelBuilder.Entity("Dictionary.Domain.Entity.InflectionalAffix", b =>
                {
                    b.HasOne("Dictionary.Domain.Entity.PartOfSpeech", "FirstPartOfSpeach")
                        .WithMany()
                        .HasForeignKey("FirstPartOfSpeachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dictionary.Domain.Entity.TypeOfInflectionalAffix", "TypesOfInflectionalAffixes")
                        .WithMany()
                        .HasForeignKey("TypesOfInflectionalAffixesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FirstPartOfSpeach");

                    b.Navigation("TypesOfInflectionalAffixes");
                });

            modelBuilder.Entity("Dictionary.Domain.Entity.LiteraryWord", b =>
                {
                    b.HasOne("Dictionary.Domain.Entity.PartOfSpeech", "PartOfSpeech")
                        .WithMany()
                        .HasForeignKey("PartOfSpeechId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PartOfSpeech");
                });
#pragma warning restore 612, 618
        }
    }
}
